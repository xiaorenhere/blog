(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{469:function(t,n,r){"use strict";r.r(n);var p=r(3),e=Object(p.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"说说你对-typescript-的理解-与-javascript-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#说说你对-typescript-的理解-与-javascript-的区别"}},[t._v("#")]),t._v(" 说说你对 TypeScript 的理解？与 JavaScript 的区别？")]),t._v(" "),n("p",[n("strong",[t._v("一、是什么")]),t._v("\nTypeScript 是 JavaScript 的类型的超集，支持 ES6 语法，支持面向对象编程的概念，如类、接口、继承、泛型等")]),t._v(" "),n("p",[t._v("超集，不得不说另外一个概念，子集，怎么理解这两个呢，举个例子，如果一个集合 A 里面的的所有元素集合 B 里面都存在，那么我们可以理解集合 B 是集合 A 的超集，集合 A 为集合 B 的子集")]),t._v(" "),n("p",[t._v("其是一种静态类型检查的语言，提供了类型注解，在代码编译阶段就可以检查出数据类型的错误")]),t._v(" "),n("p",[t._v("同时扩展了 JavaScript 的语法，所以任何现有的 JavaScript 程序可以不加改变的在 TypeScript 下工作")]),t._v(" "),n("p",[t._v("为了保证兼容性，TypeScript 在编译阶段需要编译器编译成纯 JavaScript 来运行，是为大型应用之开发而设计的语言，如下：")]),t._v(" "),n("p",[t._v("ts 文件如下：")]),t._v(" "),n("p",[t._v('const hello: string = "Hello World!";\nconsole.log(hello);\n编译文件后：')]),t._v(" "),n("p",[t._v('const hello = "Hello World!";\nconsole.log(hello);\n'),n("strong",[t._v("二、特性")]),t._v("\nTypeScript 的特性主要有如下：")]),t._v(" "),n("p",[t._v("类型批注和编译时类型检查 ：在编译时批注变量类型\n类型推断：ts 中没有批注变量类型会自动推断变量的类型\n类型擦除：在编译过程中批注的内容和接口会在运行时利用工具擦除\n接口：ts 中用接口来定义对象类型\n枚举：用于取值被限定在一定范围内的场景\nMixin：可以接受任意类型的值\n泛型编程：写代码时使用一些以后才指定的类型\n名字空间：名字只在该区域内有效，其他区域可重复使用该名字而不冲突\n元组：元组合并了不同类型的对象，相当于一个可以装不同类型数据的数组\n... #类型批注\n通过类型批注提供在编译时启动类型检查的静态类型，这是可选的，而且可以忽略而使用 JavaScript 常规的动态类型")]),t._v(" "),n("p",[t._v("function Add(left: number, right: number): number {\nreturn left + right;\n}\n对于基本类型的批注是 number、bool 和 string，而弱或动态类型的结构则是 any 类型")]),t._v(" "),n("p",[t._v("#类型推断\n当类型没有给出时，TypeScript 编译器利用类型推断来推断类型，如下：")]),t._v(" "),n("p",[t._v('let str = "string";\n变量 str 被推断为字符串类型，这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时')]),t._v(" "),n("p",[t._v("如果缺乏声明而不能推断出类型，那么它的类型被视作默认的动态 any 类型")]),t._v(" "),n("p",[t._v("#接口\n接口简单来说就是用来描述对象的类型 数据的类型有 number、null、string 等数据格式，对象的类型就是用接口来描述的")]),t._v(" "),n("p",[t._v("interface Person {\nname: string;\nage: number;\n}")]),t._v(" "),n("p",[t._v('let tom: Person = {\nname: "Tom",\nage: 25,\n};\n'),n("strong",[t._v("三、区别")]),t._v("\nTypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法\nTypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译\nTypeScript 文件的后缀名 .ts （.ts，.tsx，.dts），JavaScript 文件是 .js\n在编写 TypeScript 的文件的时候就会自动编译成 js 文件\n更多的区别如下图所示：")])])}),[],!1,null,null,null);n.default=e.exports}}]);